# -*- coding: utf-8 -*-
"""House Price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ll_ofNhKoXqvBGKtsqPV1cP9mxZ9oa5u
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

dataset = sklearn.datasets.load_boston()

#loading the dataset to a Pandas Dataframe
dataset_dataframe = pd.DataFrame(dataset.data,columns=dataset.feature_names)
dataset_dataframe.head()

#add the target column (house prices) to the dataframe
dataset_dataframe['PRICE'] = dataset.target

dataset_dataframe.shape

#check for missing values
dataset_dataframe.isnull().sum()

dataset_dataframe.describe()

"""Understanding the correlation between features in the dataset"""

correlation = dataset_dataframe.corr()

#constructing a heat map 
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

X = dataset_dataframe.drop('PRICE',axis=1)
Y = dataset_dataframe['PRICE']

X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

model = XGBRegressor()

model.fit(X_train,y_train)

prediction = model.predict(X_train)
print(prediction)

# Model Evaluation
# Classification --> accuracy score
#Regression -->mean squared error

# R squared error
score_1 = metrics.r2_score(y_train,prediction)
print(score_1)

#Mean Absolute error
score_2 = metrics.mean_absolute_error(y_train,prediction)
print(score_2)

plt.scatter(y_train,prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual vs Predicted')
plt.show()

prediction_2 = model.predict(X_test)
# R squared error
score_1_a = metrics.r2_score(y_test,prediction_2)
print(score_1_a)

#Mean Absolute error
score_2_a= metrics.mean_absolute_error(y_test,prediction_2)
print(score_2_a)