# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-40n45PQt0C-N2dXZ-eyAFDcMvfyYNNQ
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_data = pd.read_csv('/content/diabetes.csv')

diabetes_data.groupby(['Outcome']).mean()

X = diabetes_data.drop(['Outcome'],axis=1)
Y = diabetes_data['Outcome']

"""Data Standarization"""

scaler = StandardScaler()

scaler.fit(X)

stand_data = scaler.transform(X)

print(stand_data)

X = stand_data

X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,y_train)

X_train_predict = classifier.predict(X_train)
X_train_accuracy = accuracy_score(X_train_predict,y_train)
print(X_train_accuracy)

X_test_predict = classifier.predict(X_test)
X_test_accuracy = accuracy_score(X_test_predict,y_test)
print(X_test_accuracy)

"""Building a Predictive System"""

input_data=(6,148,72,35,0,33.6,0.627,50)

input_array = np.asarray(input_data)
input_array_reshaped = input_array.reshape(1,-1)
input_array_stand = scaler.transform(input_array_reshaped)
prediction = classifier.predict(input_array_stand)
if prediction[0] == 0:
  print('The patient is not diabetic')
else:
  print('The patient is diabetic')
print(prediction)