# -*- coding: utf-8 -*-
"""Sonar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10bb3S51y6XdujFpJ9RngmJfDuDD9i8w-
"""

import pandas as pd
import numpy as np
import seaborn as snr
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

sonar_data = pd.read_csv('/content/Sonar.csv',header=None)
sonar_data.head()

"""number of rows and columns"""

sonar_data.shape
#208 rows

sonar_data.describe()

sonar_data[60].value_counts()
#column 60 is the one that classifies rocks and mines

sonar_data.groupby(60).mean()

"""Seperate data and label"""

X = sonar_data.drop(columns=60,axis=1)
Y = sonar_data[60]

"""Training and Testing"""

X_train , X_test , y_train , y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

model= LogisticRegression()

model.fit(X_train,y_train)

"""Model Evaluation"""

X_train_predict = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_predict,y_train)
Failure = 1-training_data_accuracy
print('The accuracy of the model using the training data is ',training_data_accuracy)
print('The Failure percentage of the model using the training data is ',Failure)

X_test_predict = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_predict,y_test)
Failure_test = 1-test_data_accuracy
print('The accuracy of the model using the training data is ',test_data_accuracy)
print('The Failure percentage of the model using the training data is ',Failure_test)

"""Predictive System"""

input_data = (0.0094,0.0333,0.0306,0.0376,0.1296,0.1795,0.1909,0.1692,0.1870,0.1725,0.2228,0.3106,0.4144,0.5157,0.5369,0.5107,0.6441,0.7326,0.8164,0.8856,0.9891,1.0000,0.8750,0.8631,0.9074,0.8674,0.7750,0.6600,0.5615,0.4016,0.2331,0.1164,0.1095,0.0431,0.0619,0.1956,0.2120,0.3242,0.4102,0.2939,0.1911,0.1702,0.1010,0.1512,0.1427,0.1097,0.1173,0.0972,0.0703,0.0281,0.0216,0.0153,0.0112,0.0241,0.0164,0.0055,0.0078,0.0055,0.0091,0.0067)

#changing input data in numpy array
input_data_array = np.asarray(input_data)
#reshape the numpy array
input_data_reshaped=input_data_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
if prediction==['M']:
  print("Danger!!! It's a Mine")
else:
  print("It's okay,its a Rock")